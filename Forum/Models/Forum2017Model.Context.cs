//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Forum.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Forum2017SQLEntities : DbContext
    {
        public Forum2017SQLEntities()
            : base("name=Forum2017SQLEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cookie> Cookies { get; set; }
        public virtual DbSet<EditedMessage> EditedMessages { get; set; }
        public virtual DbSet<Forum> Fora { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<RepliedMessage> RepliedMessages { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int EditingMessage(Nullable<long> messageId, Nullable<long> repliedMessageId, string message, Nullable<System.DateTime> dateCreated, string messageOld)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("messageId", messageId) :
                new ObjectParameter("messageId", typeof(long));
    
            var repliedMessageIdParameter = repliedMessageId.HasValue ?
                new ObjectParameter("repliedMessageId", repliedMessageId) :
                new ObjectParameter("repliedMessageId", typeof(long));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            var messageOldParameter = messageOld != null ?
                new ObjectParameter("messageOld", messageOld) :
                new ObjectParameter("messageOld", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditingMessage", messageIdParameter, repliedMessageIdParameter, messageParameter, dateCreatedParameter, messageOldParameter);
        }
    
        public virtual int NewForum(string codeForum, string topic, string author, Nullable<System.DateTime> dateCreated)
        {
            var codeForumParameter = codeForum != null ?
                new ObjectParameter("codeForum", codeForum) :
                new ObjectParameter("codeForum", typeof(string));
    
            var topicParameter = topic != null ?
                new ObjectParameter("topic", topic) :
                new ObjectParameter("topic", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewForum", codeForumParameter, topicParameter, authorParameter, dateCreatedParameter);
        }
    
        public virtual int NewMessage(Nullable<long> forumId, string nickname, string message, Nullable<System.DateTime> dateCreated)
        {
            var forumIdParameter = forumId.HasValue ?
                new ObjectParameter("forumId", forumId) :
                new ObjectParameter("forumId", typeof(long));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewMessage", forumIdParameter, nicknameParameter, messageParameter, dateCreatedParameter);
        }
    
        public virtual int Registration(string login, string avatar, string nickname, byte[] password, string salt, Nullable<System.DateTime> dateCreated)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("avatar", avatar) :
                new ObjectParameter("avatar", typeof(string));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(byte[]));
    
            var saltParameter = salt != null ?
                new ObjectParameter("salt", salt) :
                new ObjectParameter("salt", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Registration", loginParameter, avatarParameter, nicknameParameter, passwordParameter, saltParameter, dateCreatedParameter);
        }
    
        public virtual int ReplyMessage(string nickname, Nullable<long> messageId, Nullable<long> replydMessageId, string message, Nullable<System.DateTime> dateCreated)
        {
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("messageId", messageId) :
                new ObjectParameter("messageId", typeof(long));
    
            var replydMessageIdParameter = replydMessageId.HasValue ?
                new ObjectParameter("replydMessageId", replydMessageId) :
                new ObjectParameter("replydMessageId", typeof(long));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReplyMessage", nicknameParameter, messageIdParameter, replydMessageIdParameter, messageParameter, dateCreatedParameter);
        }
    
        public virtual int SetCookie(string nickname, string ipv4, byte[] secretKey, Nullable<System.DateTime> dateOfExpiry)
        {
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var ipv4Parameter = ipv4 != null ?
                new ObjectParameter("ipv4", ipv4) :
                new ObjectParameter("ipv4", typeof(string));
    
            var secretKeyParameter = secretKey != null ?
                new ObjectParameter("secretKey", secretKey) :
                new ObjectParameter("secretKey", typeof(byte[]));
    
            var dateOfExpiryParameter = dateOfExpiry.HasValue ?
                new ObjectParameter("dateOfExpiry", dateOfExpiry) :
                new ObjectParameter("dateOfExpiry", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetCookie", nicknameParameter, ipv4Parameter, secretKeyParameter, dateOfExpiryParameter);
        }
    }
}
